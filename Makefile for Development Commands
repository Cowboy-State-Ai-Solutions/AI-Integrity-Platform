# TheoTech Moral AI Framework - Makefile
# Common development and deployment commands

.PHONY: help setup install test lint format clean build deploy docs

# Default target
help: ## Show this help message
	@echo "TheoTech Moral AI Framework - Available Commands:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "Examples:"
	@echo "  make setup          # Initial project setup"
	@echo "  make test           # Run all tests"
	@echo "  make dev            # Start development environment"
	@echo "  make deploy         # Deploy to production"

# Variables
PYTHON := python3.11
PIP := pip
DOCKER := docker
DOCKER_COMPOSE := docker-compose
PROJECT_NAME := theotech-moral-ai
API_PORT := 8000
DB_PORT := 5432

# Development Environment
setup: ## Initial project setup
	@echo "🚀 Setting up TheoTech development environment..."
	$(PYTHON) -m venv venv
	@echo "📦 Installing dependencies..."
	./venv/bin/$(PIP) install --upgrade pip
	./venv/bin/$(PIP) install -r requirements-dev.txt
	@echo "🗄️  Setting up database..."
	@if command -v createdb >/dev/null 2>&1; then \
		createdb theotech_development || echo "Database may already exist"; \
		psql theotech_development < database/schema.sql; \
		psql theotech_development < database/seeds/virtue_definitions.sql; \
		psql theotech_development < database/seeds/moral_principles.sql; \
		psql theotech_development < database/seeds/faith_traditions.sql; \
	else \
		echo "⚠️  PostgreSQL not found. Please install PostgreSQL and run 'make setup-db'"; \
	fi
	@echo "📝 Creating environment file..."
	cp .env.example .env
	@echo "✅ Setup complete! Run 'make dev' to start development server"

setup-db: ## Setup database only
	@echo "🗄️  Setting up database..."
	createdb theotech_development || echo "Database may already exist"
	psql theotech_development < database/schema.sql
	psql theotech_development < database/seeds/virtue_definitions.sql
	psql theotech_development < database/seeds/moral_principles.sql
	psql theotech_development < database/seeds/faith_traditions.sql
	@echo "✅ Database setup complete"

install: ## Install Python dependencies
	@echo "📦 Installing dependencies..."
	$(PIP) install --upgrade pip
	$(PIP) install -r requirements.txt

install-dev: ## Install development dependencies
	@echo "📦 Installing development dependencies..."
	$(PIP) install --upgrade pip
	$(PIP) install -r requirements-dev.txt

# Development Server
dev: ## Start development server
	@echo "🚀 Starting TheoTech development server..."
	uvicorn src.api.main:app --host 0.0.0.0 --port $(API_PORT) --reload

dev-docker: ## Start development environment with Docker
	@echo "🐳 Starting TheoTech with Docker Compose..."
	$(DOCKER_COMPOSE) -f docker-compose.yml up --build

# Testing
test: ## Run all tests
	@echo "🧪 Running all tests..."
	pytest tests/ -v --cov=src --cov-report=html --cov-report=term-missing

test-unit: ## Run unit tests only
	@echo "🧪 Running unit tests..."
	pytest tests/unit/ -v

test-integration: ## Run integration tests only
	@echo "🧪 Running integration tests..."
	pytest tests/integration/ -v

test-api: ## Run API tests only
	@echo "🧪 Running API tests..."
	pytest tests/api/ -v

test-performance: ## Run performance tests
	@echo "🧪 Running performance tests..."
	pytest tests/performance/ -v --durations=10

test-theological: ## Run theological validation tests
	@echo "🧪 Running theological validation tests..."
	pytest tests/theological/ -v

test-watch: ## Run tests in watch mode
	@echo "🧪 Running tests in watch mode..."
	pytest-watch tests/ -- -v

# Code Quality
lint: ## Run code linting
	@echo "🔍 Running linters..."
	flake8 src/ tests/
	pylint src/
	mypy src/

format: ## Format code
	@echo "🎨 Formatting code..."
	black src/ tests/
	isort src/ tests/

format-check: ## Check code formatting
	@echo "🔍 Checking code formatting..."
	black --check src/ tests/
	isort --check-only src/ tests/

type-check: ## Run type checking
	@echo "🔍 Running type checking..."
	mypy src/

security-check: ## Run security checks
	@echo "🔒 Running security checks..."
	bandit -r src/
	safety check

# Database Operations
db-migrate: ## Run database migrations
	@echo "🗄️  Running database migrations..."
	python scripts/migrate.py

db-seed: ## Seed database with initial data
	@echo "🌱 Seeding database..."
	python scripts/seed_data.py

db-backup: ## Backup database
	@echo "💾 Backing up database..."
	python scripts/backup_db.py

db-reset: ## Reset database (WARNING: Destructive)
	@echo "⚠️  Resetting database..."
	@read -p "Are you sure? This will delete all data (y/N): " confirm && [ "$$confirm" = "y" ]
	dropdb theotech_development || true
	createdb theotech_development
	psql theotech_development < database/schema.sql
	$(MAKE) db-seed

# Docker Operations
build: ## Build Docker images
	@echo "🐳 Building Docker images..."
	$(DOCKER) build -t $(PROJECT_NAME):latest .
	$(DOCKER) build -t $(PROJECT_NAME):development --target development .

build-production: ## Build production Docker image
	@echo "🐳 Building production Docker image..."
	$(DOCKER) build -t $(PROJECT_NAME):production --target production .

docker-up: ## Start Docker services
	@echo "🐳 Starting Docker services..."
	$(DOCKER_COMPOSE) up -d

docker-down: ## Stop Docker services
	@echo "🐳 Stopping Docker services..."
	$(DOCKER_COMPOSE) down

docker-logs: ## View Docker logs
	@echo "📝 Viewing Docker logs..."
	$(DOCKER_COMPOSE) logs -f

docker-clean: ## Clean Docker resources
	@echo "🧹 Cleaning Docker resources..."
	$(DOCKER) system prune -f
	$(DOCKER) volume prune -f

# Documentation
docs: ## Build documentation
	@echo "📚 Building documentation..."
	mkdocs build

docs-serve: ## Serve documentation locally
	@echo "📚 Serving documentation..."
	mkdocs serve --dev-addr 0.0.0.0:8080

docs-deploy: ## Deploy documentation
	@echo "📚 Deploying documentation..."
	mkdocs gh-deploy

# API Operations
api-docs: ## Generate API documentation
	@echo "📚 Generating API documentation..."
	python scripts/generate_api_docs.py

api-test: ## Test API endpoints
	@echo "🧪 Testing API endpoints..."
	python scripts/test_api_endpoints.py

api-benchmark: ## Benchmark API performance
	@echo "⚡ Benchmarking API performance..."
	python scripts/benchmark_api.py

# Deployment
deploy-staging: ## Deploy to staging
	@echo "🚀 Deploying to staging..."
	$(DOCKER_COMPOSE) -f docker-compose.staging.yml up -d --build
	@echo "✅ Staging deployment complete"

deploy-production: ## Deploy to production
	@echo "🚀 Deploying to production..."
	@read -p "Deploy to production? (y/N): " confirm && [ "$$confirm" = "y" ]
	$(DOCKER_COMPOSE) -f docker-compose.production.yml up -d --build
	@echo "✅ Production deployment complete"

# Monitoring
logs: ## View application logs
	@echo "📝 Viewing application logs..."
	tail -f logs/theotech.log

monitor: ## Start monitoring stack
	@echo "📊 Starting monitoring stack..."
	$(DOCKER_COMPOSE) -f docker-compose.monitoring.yml up -d

health-check: ## Check system health
	@echo "🏥 Checking system health..."
	curl -f http://localhost:$(API_PORT)/health || echo "❌ Health check failed"

metrics: ## View system metrics
	@echo "📊 Viewing system metrics..."
	curl -s http://localhost:$(API_PORT)/metrics | python -m json.tool

# Data Operations
seed-sample-data: ## Seed with sample data for development
	@echo "🌱 Seeding sample data..."
	python scripts/seed_sample_data.py

export-data: ## Export data for backup
	@echo "📤 Exporting data..."
	python scripts/export_data.py

import-data: ## Import data from backup
	@echo "📥 Importing data..."
	python scripts/import_data.py

# Performance and Analysis
benchmark: ## Run performance benchmarks
	@echo "⚡ Running performance benchmarks..."
	python scripts/performance_benchmark.py

analyze-virtue-patterns: ## Analyze virtue development patterns
	@echo "📊 Analyzing virtue patterns..."
	python scripts/analyze_virtue_patterns.py

validate-theology: ## Validate theological accuracy
	@echo "📖 Validating theological accuracy..."
	python scripts/validate_theology.py

# Maintenance
clean: ## Clean up generated files
	@echo "🧹 Cleaning up..."
	find . -type d -name "__pycache__" -exec rm -rf {} + || true
	find . -type f -name "*.pyc" -delete || true
	find . -type f -name "*.pyo" -delete || true
	find . -type f -name ".coverage" -delete || true
	rm -rf htmlcov/ || true
	rm -rf .pytest_cache/ || true
	rm -rf .mypy_cache/ || true
	rm -rf dist/ || true
	rm -rf build/ || true
	rm -rf *.egg-info/ || true

clean-docker: ## Clean Docker resources
	@echo "🧹 Cleaning Docker resources..."
	$(DOCKER) system prune -a -f
	$(DOCKER) volume prune -f

update-deps: ## Update dependencies
	@echo "🔄 Updating dependencies..."
	pip-compile requirements.in
	pip-compile requirements-dev.in

# Release Management
version: ## Show current version
	@echo "📌 Current version:"
	@python -c "import src; print(src.__version__)"

tag-release: ## Tag a new release
	@echo "🏷️  Tagging new release..."
	@read -p "Enter version (e.g., 1.0.0): " version; \
	git tag -a v$$version -m "Release v$$version"; \
	git push origin v$$version

# Development Tools
install-pre-commit: ## Install pre-commit hooks
	@echo "🔧 Installing pre-commit hooks..."
	pre-commit install

run-pre-commit: ## Run pre-commit on all files
	@echo "🔧 Running pre-commit on all files..."
	pre-commit run --all-files

# Special Targets
demo: ## Run demonstration
	@echo "🎭 Running TheoTech demonstration..."
	python examples/demo.py

cli: ## Start CLI tool
	@echo "💻 Starting TheoTech CLI..."
	python examples/cli_tool/main.py

jupyter: ## Start Jupyter notebook server
	@echo "📓 Starting Jupyter notebook server..."
	jupyter lab examples/jupyter_notebooks/

# Quick development workflow
quick-start: setup dev ## Complete setup and start development

full-test: lint test security-check ## Run complete test suite

production-build: clean format lint test build-production ## Complete production build

# Status check
status: ## Show project status
	@echo "📊 TheoTech Moral AI Framework Status:"
	@echo "  Python: $$(python --version 2>&1)"
	@echo "  Dependencies: $$(pip list | wc -l) packages installed"
	@echo "  Database: $$(psql theotech_development -c 'SELECT version();' 2>/dev/null | head -3 | tail -1 || echo 'Not connected')"
	@echo "  Docker: $$(docker --version 2>/dev/null || echo 'Not installed')"
	@echo "  Tests: $$(find tests/ -name '*.py' | wc -l) test files"
	@echo "  Source: $$(find src/ -name '*.py' | xargs wc -l | tail -1 | awk '{print $$1}') lines of code"

# Help with specific components
help-api: ## Show API-specific commands
	@echo "🔌 API Commands:"
	@echo "  make dev             - Start development server"
	@echo "  make api-test        - Test API endpoints"
	@echo "  make api-docs        - Generate API documentation"
	@echo "  make api-benchmark   - Performance benchmarking"

help-database: ## Show database-specific commands
	@echo "🗄️  Database Commands:"
	@echo "  make setup-db        - Setup database"
	@echo "  make db-migrate      - Run migrations"
	@echo "  make db-seed         - Seed initial data"
	@echo "  make db-backup       - Backup database"
	@echo "  make db-reset        - Reset database (destructive)"

help-docker: ## Show Docker-specific commands
	@echo "🐳 Docker Commands:"
	@echo "  make build           - Build Docker images"
	@echo "  make docker-up       - Start Docker services"
	@echo "  make docker-down     - Stop Docker services"
	@echo "  make docker-logs     - View Docker logs"
	@echo "  make docker-clean    - Clean Docker resources"
