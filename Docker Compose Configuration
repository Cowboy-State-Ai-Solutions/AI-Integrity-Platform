version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: theotech-postgres
    environment:
      POSTGRES_DB: theotech_production
      POSTGRES_USER: theotech_user
      POSTGRES_PASSWORD: theotech_secure_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seeds:/docker-entrypoint-initdb.d/seeds
    ports:
      - "5432:5432"
    networks:
      - theotech-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U theotech_user -d theotech_production"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    container_name: theotech-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - theotech-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TheoTech API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: theotech-api
    environment:
      # Database Configuration
      THEOTECH_DB_HOST: postgres
      THEOTECH_DB_PORT: 5432
      THEOTECH_DB_NAME: theotech_production
      THEOTECH_DB_USER: theotech_user
      THEOTECH_DB_PASSWORD: theotech_secure_password
      THEOTECH_DB_MIN_CONN: 10
      THEOTECH_DB_MAX_CONN: 100
      
      # Redis Configuration
      THEOTECH_REDIS_HOST: redis
      THEOTECH_REDIS_PORT: 6379
      
      # API Configuration
      THEOTECH_API_HOST: 0.0.0.0
      THEOTECH_API_PORT: 8000
      THEOTECH_API_WORKERS: 4
      THEOTECH_LOG_LEVEL: INFO
      
      # Security
      THEOTECH_JWT_SECRET: your-super-secret-jwt-key-change-in-production
      THEOTECH_JWT_ALGORITHM: HS256
      THEOTECH_JWT_EXPIRE_MINUTES: 1440
      
      # Performance
      THEOTECH_ASYNC_POOL_SIZE: 20
      THEOTECH_CACHE_TTL: 3600
      
      # Monitoring
      THEOTECH_METRICS_ENABLED: true
      THEOTECH_HEALTH_CHECK_INTERVAL: 30
      
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - theotech-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: theotech-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/nginx/ssl:/etc/nginx/ssl
      - ./docs:/usr/share/nginx/html/docs
    depends_on:
      - api
    networks:
      - theotech-network
    restart: unless-stopped

  # Prometheus Metrics (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: theotech-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - theotech-network
    restart: unless-stopped

  # Grafana Dashboard (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: theotech-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin_change_me
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - theotech-network
    restart: unless-stopped

  # pgAdmin (Database Administration)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: theotech-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@theotech.ai
      PGADMIN_DEFAULT_PASSWORD: admin_change_me
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - theotech-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  theotech-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
